#!/bin/sh
# -*- ksh -*-

if [ '' = "$(which fvwm2)" ]
then
  echo "ERROR: 'fvwm2' window manager is needed to run the tests" >&2
  exit 1
fi
if [ '' = "$(which cnee)" ]
then
  echo "ERROR: 'cnee' is needed to run the tests" >&2
  exit 1
fi


# Small time to wait before sending events
export SMALL1=0.1
# Time to wait before making the dump
export SMALL2=0.2


if false
then
  VALGRIND=valgrind
  SMALL1=100
  SMALL2=200
fi

X=0
Y=0

zmw_small_scale() {
SAVE_SMALL1=$SMALL1
SAVE_SMALL2=$SMALL2

SMALL1=`echo "$SMALL1 * $1" | bc`
SMALL2=`echo "$SMALL2 * $1" | bc`
}

zmw_small_restore() {
SMALL1=$ZMW_SMALL1
SMALL2=$ZMW_SMALL2
}

export KEY_A=37
export KEY_B=38
export KEY_LEFT=39
export KEY_CONTROL=40
export KEY_SLASH=41
export KEY_BACKSPACE=42
export KEY_F1=43
export KEY_PAGEUP=44
export KEY_UP=45
export KEY_ALT=46
export KEY_META=47
export KEY_SHIFT=48
export KEY_ESCAPE=49
export KEY_TAB=50
export KEY_DOWN=51
export KEY_RIGHT=52
export KEY_PLUS=53
export KEY_F11=54
export KEY_W=55


start_xvfb() {
  if [ "" = "$1" ]
  then
    RESOLUTION=700x700
  else
    RESOLUTION=$1
  fi

  # X server start number for Xvfb
  # Will launch X server until one starts
  export ZMW_XVFBN=9
  while true
  do
    if true
    then
      # depth 32 does NOT work, the "xwd" command does not work correctly
      Xvfb :$ZMW_XVFBN -ac -screen 0 ${RESOLUTION}x24 -noreset &
    else
      Xnest :$ZMW_XVFBN -ac -noreset &
    fi >xxx.bad
    sleep 1
    if [ `fgrep -c "Fatal server error" xxx.bad` = "1" ]
    then
      echo "Server X yet running on $ZMW_XVFBN, take the next" >&2
      export ZMW_XVFBN=`expr $ZMW_XVFBN + 1`
      rm xxx.bad
    else
      break
    fi
  done

  export ZMW_XVFB=:$ZMW_XVFBN.0
  export ZMW_XVFB_PID=$!
  echo "Starting X11 server: $ZMW_XVFB_PID"
  trap stop_xvfb 0 1 2 3
  xsetroot -display $ZMW_XVFB -solid white
  # Clear the keyboard
  xmodmap -display $ZMW_XVFB -pke | sed 's/= .*/=/' |
          xmodmap -display $ZMW_XVFB -
  # Define the keyboard
  xmodmap -display $ZMW_XVFB -e "keycode $KEY_A = a" \
   -e "keycode $KEY_B = b" \
   -e "keycode $KEY_W = w" \
   -e "keycode $KEY_SLASH = slash" \
   -e "keycode $KEY_LEFT = Left" \
   -e "keycode $KEY_BACKSPACE = BackSpace" \
   -e "keycode $KEY_CONTROL = Control_L Control_R" \
   -e "keycode $KEY_F1 = F1" \
   -e "keycode $KEY_F11 = F11" \
   -e "keycode $KEY_PAGEUP = Prior" \
   -e "keycode $KEY_ALT = Alt_L Alt_R" \
   -e "keycode $KEY_META = Meta_L Meta_R" \
   -e "keycode $KEY_SHIFT = Shift_L Shift_R" \
   -e "keycode $KEY_UP = Up" \
   -e "keycode $KEY_ESCAPE = Escape" \
   -e "keycode $KEY_TAB = Tab" \
   -e "keycode $KEY_DOWN = Down" \
   -e "keycode $KEY_RIGHT = Right" \
   -e "keycode $KEY_PLUS = plus" \
   -e "clear Lock" \
   -e "clear Shift" \
   -e "clear Mod1" \
   -e "clear Mod2" \
   -e "clear Mod3" \
   -e "clear Mod4" \
   -e "clear Mod5" \
   -e "clear Control" \
   -e "add Shift = Shift_L Shift_R" \
   -e "add Mod1 = Alt_L Alt_R" \
   -e "add Mod2 = Meta_L Meta_R" \
   -e "add Control = Control_L Control_R"

   cat >xxx.fvwm2rc <<%
ColormapFocus FollowsMouse

WindowFont              -misc-fixed-medium-r-normal-*-14-*-*-*-*-*-iso8859-1

# Key Tab         A       N       CursorMove 50 50
# Style "*"           BorderWidth 3, HandleWidth 5
%

  fvwm2 -display $ZMW_XVFB -f $(pwd)/xxx.fvwm2rc 2>&1 |
                grep -v -F -e "<<WARNING>> Couldn't load image" \
                           -e "[fvwm][ParseBinding]: <<ERROR>>" \
                           -e "[fvwm][FlocaleGetFontSet]" \
                           &
  sleep 1
  rm xxx.fvwm2rc
  xnee_loop
}

stop_xvfb() {
  if [ "" = "$ZMW_XVFB_PID" ]
  then
    echo "Stopping a not started X11 server ?" >&2
  else
    echo "Stopping X11 server: $ZMW_XVFB_PID"
    kill "$ZMW_XVFB_PID" >/dev/null 2>&1
  fi
  touch xxx.xnee_stop
}

xnee_loop() {
  rm xxx.xnee_stop xxx.xnee.full 2>/dev/null
  echo "resolution-adjustment  0" >xxx.xnee

  while [ ! -f xxx.xnee_stop ]
    do
      if [ -f xxx.xnee ]
      then
	  cat xxx.xnee
	  rm xxx.xnee
      fi
      sleep 0.1
  done | 
  cnee --display $ZMW_XVFB --replay 2>&1 |
  sed 's/.*/XNEE:&/' &
}

ZMW_COUNTER="1000"

zmw_send() {
  while [ -f "../xxx.xnee" ]
  do
    sleep 0.01
  done
  echo "$1 # X=$X Y=$Y" >>../xxx.xnee.full
  echo "$1
7,6,$X,$Y,0,0,0,$(expr $ZMW_COUNTER + 1),6,'Xnest pointer'" >../xxx.xnee
  X=$(expr '(' $X / 2 ')' '*' 2 + 1 - $X % 2)
  ZMW_COUNTER=$(expr $ZMW_COUNTER + 2)
}

zmw_move_cursor_to() {
        echo "zmw_move_cursor_to $*" >>../xxx.xnee.full
        X="$1"
        Y="$2"
        zmw_send "7,6,$1,$2,0,0,0,$ZMW_COUNTER,6,'Xnest pointer'"
	zmw_sleep $SMALL1 
        zmw_send "7,6,`expr $1 + 1`,$2,0,0,0,$ZMW_COUNTER,6,'Xnest pointer'"
        zmw_sleep $SMALL1
}

zmw_button_press() {
        echo "zmw_button_press $*" >>../xxx.xnee.full
	zmw_send "7,4,0,0,1,0,0,$ZMW_COUNTER,6,'Xnest pointer'"
}

zmw_button_release() {
        echo "zmw_button_release $*" >>../xxx.xnee.full
	zmw_send "7,5,0,0,1,0,0,$ZMW_COUNTER,6,'Xnest pointer'"
}

zmw_button_click() {
        echo "zmw_button_click $*" >>../xxx.xnee.full
	zmw_button_press
	zmw_button_release
}

zmw_button2_press() {
        echo "zmw_button2_press $*" >>../xxx.xnee.full
	zmw_send "7,4,0,0,2,0,0,$ZMW_COUNTER,6,'Xnest pointer'"
}

zmw_button2_release() {
        echo "zmw_button2_release $*" >>../xxx.xnee.full
	zmw_send "7,5,0,0,2,0,0,$ZMW_COUNTER,6,'Xnest pointer'"
}

zmw_button2_click() {
        echo "zmw_button2_click $*" >>../xxx.xnee.full
	zmw_button2_press
	zmw_button2_release
}
zmw_key_press() {
        echo "zmw_key_press $*" >>../xxx.xnee.full
        zmw_send "7,2,0,0,0,$1,0,$ZMW_COUNTER,7,'Xnest keyboard'"
}

zmw_key_release() {
        echo "zmw_key_release $*" >>../xxx.xnee.full
        zmw_send "7,3,0,0,0,$1,0,$ZMW_COUNTER,7,'Xnest keyboard'"
}

zmw_key() {
    echo "zmw_key $*" >>../xxx.xnee.full
    zmw_key_press "$1"
    zmw_key_release "$1"
}

zmw_sleep() {
	sleep $1 || sleep 1
}

zmw_dump_screen() {
        echo "zmw_dump_screen $*" >>../xxx.xnee.full
	echo -n "$1"
	zmw_sleep $SMALL2
	xwd -root -screen |
	    xwdtopnm  |
	    pnmcrop -white >"xxx.$NAME.$1.ppm"
}

